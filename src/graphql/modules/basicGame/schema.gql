type Player {
    playerName: String!
    playerScore: Int!
    playerCards: [Int]!
}

type BasicGame {
    _id: ID!
    gameName: String!
    gameMode: String!
    gameDificulty: String!
    gameTotalCards: Int!
    gameCards: [Int]!
    players: [Player]!
    error: String
}

input UpdateBasicGameInput {
    id: ID!
    playerName: String
    playerIcon: Int
}

input CreateBasicGameInput {
    gameName: String!
    gameMode: String!
    gameDificulty: String!
    players: [String]!
}

input JoinBasicGameInput {
    gameName: String!
    playerName: String!
}

type Query {
    games: [BasicGame!]!
    game(id: ID!): BasicGame!
}

type Mutation {
    createBasicGame(data: CreateBasicGameInput): BasicGame!
    updateBasicGame(data: UpdateBasicGameInput): BasicGame
    deleteBasicGame(id: ID!): Boolean
}

type Subscription {
    gamesSub: BasicGame!,
    hello: String!
    postCreated: String!
    chatCreated: Int
}